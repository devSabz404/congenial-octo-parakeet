{"version":3,"sources":["components/SignOutModal.tsx","components/EnterPincodeModal.tsx","components/MakePaymentModal.tsx","components/TrustAssetModal.tsx","methods/copyToClipboard.ts","constants.ts","methods/makePayment.ts","methods/trustAsset.ts","views/Account.jsx","components/SecretKeySignInModal.tsx","components/SetPincodeModal.tsx","views/Intro.tsx","methods/createKeystore.js","methods/fetchAccount.ts","App.tsx","services/storage.ts","index.tsx"],"names":["SignOutModal","visible","onClose","onDone","Heading","Body","Footer","variant","Button","secondary","onClick","EnterPincodeModal","React","useState","pincode","setPincode","id","label","onBlur","e","target","value","MakePaymentModal","destination","setDestination","amount","setAmount","assetCode","setAssetCode","assetIssuer","setAssetIssuer","isNativeAsset","setIsNativeAsset","useEffect","type","disabled","note","TrustAssetModal","copyToClipboard","text","copy","NETWORK_URL","NETWORK_PASSPHRASE","StellarSdk","Networks","TESTNET","makePayment","secretKey","server","Server","keypair","Keypair","fromSecret","publicKey","buildPaymentTransaction","transaction","Error","sign","submitTransaction","loadAccount","sequence","Account","source","asset","Asset","native","operation","Operation","payment","toString","withMuxing","TransactionBuilder","BASE_FEE","fetchTimebounds","fee","networkPassphrase","timebounds","addOperation","build","trustAsset","account","changeTrust","setTimeout","accountKeys","accountData","refreshAccount","isUiUpdating","setIsUiUpdating","pinModalVisible","setPinModalVisible","trustAssetModalVisible","setTrustAssetModalVisible","makePaymentModalVisible","setMakePaymentModalVisible","getKeypairFromKeystore","keystore","sjcl","decrypt","handleTrustAsset","secret","handleMakePayment","className","publicAddress","balances","map","b","asset_code","balance","asset_issuer","isLoading","SecretKeySignInModal","setSecretKey","pincodeConfirm","setPincodeConfirm","SetPincodeModal","Intro","createAndSetAccount","signInWithSecretKey","newPinModalVisible","setNewPinModalVisible","secretKeyModalVisible","setSecretKeyModalVisible","createKeystore","encrypt","adata","JSON","stringify","fetchAccount","accounts","accountId","call","last_modified_time","num_sponsoring","num_sponsored","reduce","res","asset_type","STORAGE_KEY","App","setAccountKeys","setAccountData","isUpdatingAccount","setIsUpdatingAccount","signOutModalVisible","setSignOutModalVisible","savedAccountInfo","key","item","localStorage","getItem","parse","getStorageItem","fetchAccountData","data","handleAccountInfo","accountInfo","setItem","random","fetch","Header","projectTitle","onSignOut","conditionalSignOutAction","hasDarkModeToggle","Content","Inset","removeItem","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d268774a.chunk.js","sourcesContent":["// UI elements\r\nimport { Button, Modal } from \"@stellar/design-system\";\r\n\r\ninterface SignOutModalProps {\r\n  visible: boolean;\r\n  onClose: () => void;\r\n  onDone: () => void;\r\n}\r\n\r\nexport const SignOutModal = ({\r\n  visible,\r\n  onClose,\r\n  onDone\r\n}: SignOutModalProps) => {\r\n  const handleDone = () => {\r\n    onDone();\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <Modal visible={visible} onClose={onClose}>\r\n      <Modal.Heading>Sign out</Modal.Heading>\r\n      <Modal.Body>\r\n        <p>\r\n          Are you sure? This will remove saved account information from the\r\n          local storage. Your account will not be affected.\r\n        </p>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button variant={Button.variant.secondary} onClick={onClose}>\r\n          Cancel\r\n        </Button>\r\n        <Button onClick={handleDone}>Confirm</Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n","import React from \"react\";\r\n// UI elements\r\nimport { Button, Modal, Input } from \"@stellar/design-system\";\r\n\r\ninterface EnterPincodeModalProps {\r\n  visible: boolean;\r\n  onClose: () => void;\r\n  onDone: (val: string) => void;\r\n}\r\n\r\nexport const EnterPincodeModal = ({\r\n  visible,\r\n  onClose,\r\n  onDone\r\n}: EnterPincodeModalProps) => {\r\n  // 🌎 Handling React local state (state variable and setter function)\r\n  const [pincode, setPincode] = React.useState(\"\");\r\n\r\n  const handleDone = () => {\r\n    if (!pincode) {\r\n      // 🌎 Handle error here\r\n      return;\r\n    }\r\n\r\n    onDone(pincode);\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <Modal visible={visible} onClose={onClose}>\r\n      <Modal.Heading>Copy secret key</Modal.Heading>\r\n      <p>Enter the pincode you used to encrypt the keystore data.</p>\r\n      <Modal.Body>\r\n        <Input\r\n          id=\"pincode\"\r\n          label=\"Enter your keystore pincode\"\r\n          onBlur={(e) => setPincode(e.target.value)}\r\n        />\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button variant={Button.variant.secondary} onClick={onClose}>\r\n          Cancel\r\n        </Button>\r\n        <Button onClick={handleDone}>Confirm</Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n","import React from \"react\";\r\n// UI elements\r\nimport { Button, Modal, Input } from \"@stellar/design-system\";\r\n// Types\r\nimport { MakePaymentResponseParam } from \"../types/types.d\";\r\n\r\ninterface MakePaymentModalProps {\r\n  visible: boolean;\r\n  onClose: () => void;\r\n  onDone: (param: MakePaymentResponseParam) => void;\r\n}\r\n\r\nexport const MakePaymentModal = ({\r\n  visible,\r\n  onClose,\r\n  onDone\r\n}: MakePaymentModalProps) => {\r\n  // 🌎 Handling React local state (state variable and setter function)\r\n  const [destination, setDestination] = React.useState(\"\");\r\n  const [amount, setAmount] = React.useState(\"\");\r\n  const [assetCode, setAssetCode] = React.useState(\"\");\r\n  const [assetIssuer, setAssetIssuer] = React.useState(\"\");\r\n  const [pincode, setPincode] = React.useState(\"\");\r\n  const [isNativeAsset, setIsNativeAsset] = React.useState(false);\r\n\r\n  const resetLocalState = () => {\r\n    setDestination(\"\");\r\n    setAmount(\"\");\r\n    setAssetCode(\"\");\r\n    setAssetIssuer(\"\");\r\n    setPincode(\"\");\r\n    setIsNativeAsset(false);\r\n  };\r\n\r\n  // 🌎 Resetting local state when modal opens\r\n  React.useEffect(() => {\r\n    if (visible) {\r\n      resetLocalState();\r\n    }\r\n  }, [visible]);\r\n\r\n  const handleDone = () => {\r\n    if (!destination || !amount || !assetCode || !pincode) {\r\n      // 🌎 Handle error here\r\n      return;\r\n    }\r\n\r\n    if (!isNativeAsset && !assetIssuer) {\r\n      // 🌎 Handle error here\r\n      return;\r\n    }\r\n\r\n    onDone({\r\n      destination,\r\n      amount,\r\n      assetCode,\r\n      assetIssuer,\r\n      pincode\r\n    });\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <Modal visible={visible} onClose={onClose}>\r\n      <Modal.Heading>Make Payment</Modal.Heading>\r\n      <Modal.Body>\r\n        <Input\r\n          id=\"destination\"\r\n          label=\"Enter destination address\"\r\n          onBlur={(e) => setDestination(e.target.value)}\r\n        />\r\n        <Input\r\n          id=\"amount\"\r\n          label=\"Enter amount\"\r\n          onBlur={(e) => setAmount(e.target.value)}\r\n          type=\"number\"\r\n        />\r\n        <Input\r\n          id=\"assetCode\"\r\n          label=\"Enter asset code\"\r\n          onBlur={(e) => {\r\n            setAssetCode(e.target.value);\r\n            setIsNativeAsset(e.target.value === \"XLM\");\r\n          }}\r\n        />\r\n        <Input\r\n          id=\"assetIssuer\"\r\n          label=\"Enter asset issuer\"\r\n          onBlur={(e) => setAssetIssuer(e.target.value)}\r\n          // 🌎 disabling asset issuer input field for native XLM asset, which\r\n          // does not have asset issuer\r\n          disabled={isNativeAsset}\r\n          note={isNativeAsset ? \"XLM is native asset\" : null}\r\n        />\r\n        <Input\r\n          id=\"pincode\"\r\n          label=\"Enter your keystore pincode\"\r\n          onBlur={(e) => setPincode(e.target.value)}\r\n          note=\"Pincode is needed to get the secret key from the keystore\"\r\n        />\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button variant={Button.variant.secondary} onClick={onClose}>\r\n          Cancel\r\n        </Button>\r\n        <Button onClick={handleDone}>Confirm</Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n","import React from \"react\";\r\n// UI elements\r\nimport { Button, Modal, Input } from \"@stellar/design-system\";\r\n\r\ninterface TrustAssetModalProps {\r\n  visible: boolean;\r\n  onClose: () => void;\r\n  onDone: (code: string, issuer: string, pin: string) => void;\r\n}\r\n\r\nexport const TrustAssetModal = ({\r\n  visible,\r\n  onClose,\r\n  onDone\r\n}: TrustAssetModalProps) => {\r\n  // 🌎 Handling React local state (state variable and setter function)\r\n  const [assetCode, setAssetCode] = React.useState(\"\");\r\n  const [assetIssuer, setAssetIssuer] = React.useState(\"\");\r\n  const [pincode, setPincode] = React.useState(\"\");\r\n\r\n  const handleDone = () => {\r\n    if (!assetCode || !assetIssuer || !pincode) {\r\n      // 🌎 Handle error here\r\n      return;\r\n    }\r\n\r\n    onDone(assetCode, assetIssuer, pincode);\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <Modal visible={visible} onClose={onClose}>\r\n      <Modal.Heading>Trust Asset</Modal.Heading>\r\n      <p>Create a trustline to an asset.</p>\r\n      <Modal.Body>\r\n        <Input\r\n          id=\"assetCode\"\r\n          label=\"Enter asset code\"\r\n          onBlur={(e) => setAssetCode(e.target.value)}\r\n        />\r\n        <Input\r\n          id=\"assetIssuer\"\r\n          label=\"Enter asset issuer\"\r\n          onBlur={(e) => setAssetIssuer(e.target.value)}\r\n        />\r\n        <Input\r\n          id=\"pincode\"\r\n          label=\"Enter your keystore pincode\"\r\n          onBlur={(e) => setPincode(e.target.value)}\r\n          note=\"Pincode is needed to get the secret key from the keystore\"\r\n        />\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button variant={Button.variant.secondary} onClick={onClose}>\r\n          Cancel\r\n        </Button>\r\n        <Button onClick={handleDone}>Continue</Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n","// 🌎 Import library we’re using to handle copying to clipboard\r\nimport copy from \"copy-to-clipboard\";\r\n\r\n// 🌎 Copy text to device’s clipboard\r\nexport const copyToClipboard = (text?: string) => {\r\n  if (text) {\r\n    copy(text);\r\n  }\r\n};\r\n","import StellarSdk from \"stellar-sdk\";\r\n\r\nexport const NETWORK_URL = \"https://horizon-testnet.stellar.org\";\r\nexport const NETWORK_PASSPHRASE = StellarSdk.Networks.TESTNET;\r\n","// 🌎 Importing Stellar SDK JS library\r\nimport StellarSdk from \"stellar-sdk\";\r\n// 🌎 Importing constants\r\nimport { NETWORK_URL, NETWORK_PASSPHRASE } from \"../constants\";\r\n\r\ntype MakePaymentProps = {\r\n  amount: string;\r\n  assetCode: string;\r\n  assetIssuer: string;\r\n  destination: string;\r\n  secretKey: string;\r\n};\r\n\r\nexport const makePayment = async ({\r\n  amount,\r\n  assetCode,\r\n  assetIssuer,\r\n  destination,\r\n  secretKey\r\n}: MakePaymentProps) => {\r\n  let transaction;\r\n  // 🚀 Creating server instance with Stellar test network\r\n  const server = new StellarSdk.Server(NETWORK_URL);\r\n  // 🚀 Creating keypair from the secret key\r\n  const keypair = StellarSdk.Keypair.fromSecret(secretKey);\r\n  // 🚀 Getting public key from keypair\r\n  const publicKey = keypair.publicKey();\r\n\r\n  try {\r\n    // 🚀 Building payment transaction\r\n    transaction = await buildPaymentTransaction({\r\n      amount,\r\n      assetCode,\r\n      assetIssuer,\r\n      destination,\r\n      publicKey,\r\n      server\r\n    });\r\n  } catch (error) {\r\n    // 🌎 Handle error here\r\n    throw new Error(\"Failed to build transaction\");\r\n  }\r\n\r\n  try {\r\n    // 🚀 Signing transaction\r\n    await transaction.sign(keypair);\r\n  } catch (error) {\r\n    // 🌎 Handle error here\r\n    throw new Error(\"Failed to sign transaction\");\r\n  }\r\n\r\n  // 🚀 Submitting transaction to the network\r\n  return await server.submitTransaction(transaction);\r\n};\r\n\r\ntype BuildPaymentTransactionProps = {\r\n  amount: string;\r\n  assetCode: string;\r\n  assetIssuer: string;\r\n  destination: string;\r\n  publicKey: string;\r\n  server: any;\r\n};\r\n\r\nconst buildPaymentTransaction = async ({\r\n  amount,\r\n  assetCode,\r\n  assetIssuer,\r\n  destination,\r\n  publicKey,\r\n  server\r\n}: BuildPaymentTransactionProps) => {\r\n  try {\r\n    // 🚀 Getting sequence number from the account\r\n    const { sequence } = await server.loadAccount(publicKey);\r\n    // 🚀 Creating source account instance\r\n    const source = await new StellarSdk.Account(publicKey, sequence);\r\n\r\n    // 🚀 For brevity, we are not checking if the destination account is funded\r\n    // or if it has a trustline to the asset (if it is not native XLM).\r\n    // To fund/create a destination account, at least 1 XLM needs to be sent\r\n    // using create account operation.\r\n\r\n    // 🚀 Creating asset instance (native or issued)\r\n    const asset =\r\n      !assetCode || assetCode === \"XLM\"\r\n        ? StellarSdk.Asset.native()\r\n        : new StellarSdk.Asset(assetCode, assetIssuer);\r\n\r\n    // 🚀 Creating payment operation\r\n    const operation = StellarSdk.Operation.payment({\r\n      destination,\r\n      asset,\r\n      amount: amount.toString(),\r\n      // 🚀 This flag adds support to send to muxed account (M-address)\r\n      withMuxing: true\r\n    });\r\n\r\n    // 🚀 Creating transaction with the operation\r\n    const transaction = new StellarSdk.TransactionBuilder(source, {\r\n      fee: StellarSdk.BASE_FEE,\r\n      networkPassphrase: NETWORK_PASSPHRASE,\r\n      // 🚀 Setting timebounds to allow enough time to submit the transaction\r\n      timebounds: await server.fetchTimebounds(100)\r\n    }).addOperation(operation);\r\n    // 🚀 Normally we would need to call setTimeout() here, but setting\r\n    // timebounds earlier takes care of it\r\n\r\n    // 🚀 Building transaction\r\n    return transaction.build();\r\n  } catch (error) {\r\n    // 🌎 Handle transaction error here\r\n    throw new Error(\"Transaction failed\");\r\n  }\r\n};\r\n","// 🌎 Importing Stellar SDK JS library\r\nimport StellarSdk from \"stellar-sdk\";\r\n// 🌎 Importing constants\r\nimport { NETWORK_URL, NETWORK_PASSPHRASE } from \"../constants\";\r\n\r\ntype TrustAssetProps = {\r\n  secretKey: string;\r\n  assetCode: string;\r\n  assetIssuer: string;\r\n};\r\n\r\nexport const trustAsset = async ({\r\n  secretKey,\r\n  assetCode,\r\n  assetIssuer\r\n}: TrustAssetProps) => {\r\n  try {\r\n    // 🚀 Creating server instance with Stellar test network\r\n    const server = new StellarSdk.Server(NETWORK_URL);\r\n    // 🚀 Creating keypair from the secret key\r\n    const keypair = StellarSdk.Keypair.fromSecret(secretKey);\r\n    // 🚀 Getting account object with populated sequence number\r\n    const account = await server.loadAccount(keypair.publicKey());\r\n    // 🚀 Creating transaction with the operation\r\n    const transaction = new StellarSdk.TransactionBuilder(account, {\r\n      fee: StellarSdk.BASE_FEE,\r\n      networkPassphrase: NETWORK_PASSPHRASE\r\n    })\r\n      .addOperation(\r\n        // 🚀 Using `changeTrust` operation to create trustline\r\n        StellarSdk.Operation.changeTrust({\r\n          asset: new StellarSdk.Asset(assetCode, assetIssuer)\r\n        })\r\n      )\r\n      // 🚀 `setTimeout(0)` will set `maxTime` timebounds internally. This is\r\n      // needed if you want to be sure to receive the status of the transaction\r\n      // within a given period.\r\n      .setTimeout(0)\r\n      .build();\r\n\r\n    // 🚀 Signing transaction\r\n    transaction.sign(keypair);\r\n\r\n    // 🚀 Submitting transaction to the network\r\n    return await server.submitTransaction(transaction);\r\n  } catch (error) {\r\n    // 🌎 Handle error here\r\n    throw new Error(\"Add trustline transaction failed\");\r\n  }\r\n};\r\n","// 🌎 Imports in the file\r\nimport React from \"react\";\r\nimport StellarSdk from \"stellar-sdk\";\r\nimport sjcl from \"@tinyanvil/sjcl\";\r\n// UI elements\r\nimport { Button, TextLink, Identicon, Heading3 } from \"@stellar/design-system\";\r\n// Modals\r\nimport { EnterPincodeModal } from \"../components/EnterPincodeModal\";\r\nimport { MakePaymentModal } from \"../components/MakePaymentModal\";\r\nimport { TrustAssetModal } from \"../components/TrustAssetModal\";\r\n// Methods\r\nimport { copyToClipboard } from \"../methods/copyToClipboard\";\r\nimport { makePayment } from \"../methods/makePayment\";\r\nimport { trustAsset } from \"../methods/trustAsset\";\r\n// Types\r\n\r\n\r\n\r\n\r\nexport const Account = ({\r\n  accountKeys,\r\n  accountData,\r\n  refreshAccount\r\n}) => {\r\n  // 🌎 Handling React local state (state variable and setter function)\r\n  const [isUiUpdating, setIsUiUpdating] = React.useState(false);\r\n  const [pinModalVisible, setPinModalVisible] = React.useState(false);\r\n  const [trustAssetModalVisible, setTrustAssetModalVisible] = React.useState(\r\n    false\r\n  );\r\n  const [makePaymentModalVisible, setMakePaymentModalVisible] = React.useState(\r\n    false\r\n  );\r\n\r\n  // Helpers\r\n  const getKeypairFromKeystore = (pincode) => {\r\n    if (accountKeys?.keystore) {\r\n      try {\r\n        // 🚀 Create keypair from secret key\r\n        return StellarSdk.Keypair.fromSecret(\r\n          // 🌎 Decrypt secret key from keystore\r\n          sjcl.decrypt(pincode, accountKeys.keystore)\r\n        );\r\n      } catch (e) {\r\n        // 🌎 Handle pincode error\r\n      }\r\n    }\r\n  };\r\n\r\n  // Action handlers\r\n  const handleCopyAddress = () => {\r\n    // 🌎 Copy public key to clipboard\r\n    copyToClipboard(accountKeys?.publicKey);\r\n  };\r\n\r\n  const handleCopySecret = (pincode) => {\r\n    const secretKey = getKeypairFromKeystore(pincode).secret();\r\n    // 🌎 Copy secret key to clipboard\r\n    copyToClipboard(secretKey);\r\n  };\r\n\r\n  const handleTrustAsset = async (\r\n    assetCode,\r\n    assetIssuer,\r\n    pincode\r\n  ) => {\r\n    try {\r\n      // 🌎 Indicating that UI is loading\r\n      setIsUiUpdating(true);\r\n      // 🚀 Get account secret key from keystore\r\n      const secretKey = getKeypairFromKeystore(pincode).secret();\r\n      // 🚀 trust asset helper method\r\n      await trustAsset({ secretKey, assetCode, assetIssuer });\r\n      // 🌎 Fetching updated account information\r\n      refreshAccount();\r\n      // 🌎 Indicating that UI is done loading\r\n      setIsUiUpdating(false);\r\n    } catch (e) {\r\n      // 🌎 Handle trust asset error here\r\n      setIsUiUpdating(false);\r\n    }\r\n  };\r\n\r\n  const handleMakePayment = async ({\r\n    destination,\r\n    amount,\r\n    assetCode,\r\n    assetIssuer,\r\n    pincode\r\n  }) => {\r\n    try {\r\n      // 🌎 Indicating that UI is loading\r\n      setIsUiUpdating(true);\r\n      // 🚀 Get account secret key from keystore\r\n      const secretKey = getKeypairFromKeystore(pincode).secret();\r\n      // 🚀 make payment helper method\r\n      await makePayment({\r\n        destination,\r\n        amount,\r\n        assetCode,\r\n        assetIssuer,\r\n        secretKey\r\n      });\r\n      // 🌎 Fetching updated account information\r\n      refreshAccount();\r\n      // 🌎 Indicating that UI is done loading\r\n      setIsUiUpdating(false);\r\n    } catch (e) {\r\n      // 🌎 Handle make payment error here\r\n      setIsUiUpdating(false);\r\n    }\r\n  };\r\n\r\n  // 🌎 Render Account view UI\r\n  return (\r\n    <div className=\"Account\">\r\n      <Heading3>Your account address</Heading3>\r\n      {/* 🚀 Display identicon which is a unique icon, generated based on the\r\n      wallet public key */}\r\n      <Identicon publicAddress={accountKeys.publicKey} />\r\n\r\n      <div className=\"Account__copyLinks\">\r\n        {/* 🌎 Trigger copy public key action */}\r\n        <TextLink onClick={handleCopyAddress}>Copy Address</TextLink>\r\n        {/* 🌎 Trigger copy secret key action */}\r\n        <TextLink onClick={() => setPinModalVisible(true)}>\r\n          Copy Secret\r\n        </TextLink>\r\n      </div>\r\n\r\n      <Heading3>Balances</Heading3>\r\n      <table className=\"Balances\">\r\n        <tbody>\r\n          {/* 🚀 Render account balances */}\r\n          {accountData?.balances.map((b) => (\r\n            <tr key={`${b.asset_code}-${b.asset_issuer || \"native\"}`}>\r\n              <td>{b.asset_code}</td>\r\n              <td>{b.balance}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n\r\n      <div className=\"Account__buttons\">\r\n        <Button onClick={refreshAccount} isLoading={isUiUpdating}>\r\n          Refresh Account\r\n        </Button>\r\n\r\n        <Button\r\n          onClick={() => setTrustAssetModalVisible(true)}\r\n          isLoading={isUiUpdating}\r\n        >\r\n          Trust Asset\r\n        </Button>\r\n\r\n        <Button\r\n          onClick={() => setMakePaymentModalVisible(true)}\r\n          isLoading={isUiUpdating}\r\n        >\r\n          Make Payment\r\n        </Button>\r\n      </div>\r\n\r\n      {/* Modals */}\r\n      <EnterPincodeModal\r\n        visible={pinModalVisible}\r\n        onClose={() => setPinModalVisible(false)}\r\n        onDone={handleCopySecret}\r\n      />\r\n      <TrustAssetModal\r\n        visible={trustAssetModalVisible}\r\n        onClose={() => setTrustAssetModalVisible(false)}\r\n        onDone={handleTrustAsset}\r\n      />\r\n      <MakePaymentModal\r\n        visible={makePaymentModalVisible}\r\n        onClose={() => setMakePaymentModalVisible(false)}\r\n        onDone={handleMakePayment}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\n","import React from \"react\";\r\n// UI elements\r\nimport { Button, Modal, Input } from \"@stellar/design-system\";\r\n\r\ninterface SecretKeySignInModalProps {\r\n  visible: boolean;\r\n  onClose: () => void;\r\n  onDone: (secretKey: string, pin: string) => void;\r\n}\r\n\r\nexport const SecretKeySignInModal = ({\r\n  visible,\r\n  onClose,\r\n  onDone\r\n}: SecretKeySignInModalProps) => {\r\n  // 🌎 Handling React local state (state variable and setter function)\r\n  const [secretKey, setSecretKey] = React.useState(\"\");\r\n  const [pincode, setPincode] = React.useState(\"\");\r\n  const [pincodeConfirm, setPincodeConfirm] = React.useState(\"\");\r\n\r\n  const handleDone = () => {\r\n    if (!secretKey || !pincode || !pincodeConfirm) {\r\n      // 🌎 Handle required fields\r\n      return;\r\n    }\r\n\r\n    if (pincode !== pincodeConfirm) {\r\n      // 🌎 Handle no match case\r\n      return;\r\n    }\r\n\r\n    onDone(secretKey, pincode);\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <Modal visible={visible} onClose={onClose}>\r\n      <Modal.Heading>Sign in with a secret key</Modal.Heading>\r\n      <Modal.Body>\r\n        <p>\r\n          Enter a secret key and a pincode to encrypt the keystore data. You’ll\r\n          need to enter it any time you need to use a secret key.\r\n        </p>\r\n        {/* 🌎 Add secret key validation */}\r\n        <Input\r\n          id=\"secretKey\"\r\n          label=\"Enter your secret key\"\r\n          onBlur={(e) => setSecretKey(e.target.value)}\r\n        />\r\n        <Input\r\n          id=\"pincode\"\r\n          label=\"Enter a keystore pincode\"\r\n          onBlur={(e) => setPincode(e.target.value)}\r\n        />\r\n        <Input\r\n          id=\"pincodeConfirm\"\r\n          label=\"Confirm keystore pincode\"\r\n          onBlur={(e) => setPincodeConfirm(e.target.value)}\r\n        />\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button variant={Button.variant.secondary} onClick={onClose}>\r\n          Cancel\r\n        </Button>\r\n        <Button onClick={handleDone}>Sign in</Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n","import React from \"react\";\r\n// UI elements\r\nimport { Button, Modal, Input } from \"@stellar/design-system\";\r\n\r\ninterface SetPincodeModalProps {\r\n  visible: boolean;\r\n  onClose: () => void;\r\n  onDone: (val: string) => void;\r\n}\r\n\r\nexport const SetPincodeModal = ({\r\n  visible,\r\n  onClose,\r\n  onDone\r\n}: SetPincodeModalProps) => {\r\n  // 🌎 Handling React local state (state variable and setter function)\r\n  const [pincode, setPincode] = React.useState(\"\");\r\n  const [pincodeConfirm, setPincodeConfirm] = React.useState(\"\");\r\n\r\n  const handleDone = () => {\r\n    if (!pincode || !pincodeConfirm) {\r\n      // 🌎 Handle error here\r\n      return;\r\n    }\r\n\r\n    if (pincode !== pincodeConfirm) {\r\n      // 🌎 Handle no match case error here\r\n      return;\r\n    }\r\n\r\n    onDone(pincode);\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <Modal visible={visible} onClose={onClose}>\r\n      <Modal.Heading>Generate keypair</Modal.Heading>\r\n      <Modal.Body>\r\n        <p>\r\n          Enter a pincode to encrypt the keystore data. You’ll need to enter it\r\n          any time you need to use a secret key.\r\n        </p>\r\n        <Input\r\n          id=\"pincode\"\r\n          label=\"Enter a keystore pincode\"\r\n          onBlur={(e) => setPincode(e.target.value)}\r\n        />\r\n        <Input\r\n          id=\"pincodeConfirm\"\r\n          label=\"Confirm keystore pincode\"\r\n          onBlur={(e) => setPincodeConfirm(e.target.value)}\r\n        />\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button variant={Button.variant.secondary} onClick={onClose}>\r\n          Cancel\r\n        </Button>\r\n        <Button onClick={handleDone}>Confirm</Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n","import React from \"react\";\r\n// UI elements\r\nimport { Heading2, Button } from \"@stellar/design-system\";\r\n// Modals\r\nimport { SecretKeySignInModal } from \"../components/SecretKeySignInModal\";\r\nimport { SetPincodeModal } from \"../components/SetPincodeModal\";\r\n\r\ninterface IntroProps {\r\n  createAndSetAccount: (pincode: string) => Promise<void>;\r\n  signInWithSecretKey: (secretKey: string, pincode: string) => void;\r\n  isUiUpdating: boolean;\r\n}\r\n\r\nexport const Intro = ({\r\n  createAndSetAccount,\r\n  signInWithSecretKey,\r\n  isUiUpdating\r\n}: IntroProps) => {\r\n  // 🌎 Handling React local state (state variables and setter functions)\r\n  const [newPinModalVisible, setNewPinModalVisible] = React.useState(false);\r\n  const [secretKeyModalVisible, setSecretKeyModalVisible] = React.useState(\r\n    false\r\n  );\r\n\r\n  // 🌎 Render Intro view UI\r\n  return (\r\n    <div>\r\n      <Heading2>Benkiko DAO</Heading2>\r\n\r\n      <div className=\"Intro__buttons\">\r\n        {/* 🌎 Show modal to generate new account */}\r\n        <Button\r\n          onClick={() => setNewPinModalVisible(true)}\r\n          isLoading={isUiUpdating}\r\n        >\r\n          Generate keypair for new account\r\n        </Button>\r\n\r\n        {/* 🌎 Show modal to sign in with a secret key */}\r\n        <Button onClick={() => setSecretKeyModalVisible(true)}>\r\n          Sign in with a secret key\r\n        </Button>\r\n      </div>\r\n\r\n      {/* Modals */}\r\n      <SetPincodeModal\r\n        visible={newPinModalVisible}\r\n        onClose={() => setNewPinModalVisible(false)}\r\n        onDone={createAndSetAccount}\r\n      />\r\n      <SecretKeySignInModal\r\n        visible={secretKeyModalVisible}\r\n        onClose={() => setSecretKeyModalVisible(false)}\r\n        onDone={signInWithSecretKey}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","// 🌎 Import library we’re using to encrypt keystore\r\nimport sjcl from \"@tinyanvil/sjcl\";\r\n// 🌎 Importing types\r\n\r\n\r\nexport const createKeystore = (keypair, pincode) => {\r\n  // 🚀 Get public key and secret from account’s keypair\r\n  const publicKey = keypair.publicKey();\r\n  const secretKey = keypair.secret();\r\n\r\n  return {\r\n    publicKey,\r\n    // 🌎 Encrypt secret key (using pincode provided) in keystore\r\n    keystore: sjcl.encrypt(pincode, secretKey, {\r\n      adata: JSON.stringify({\r\n        publicKey\r\n      })\r\n    })\r\n  };\r\n};\r\n","// 🌎 Importing Stellar SDK JS library\r\nimport StellarSdk from \"stellar-sdk\";\r\n// 🌎 Importing constants\r\nimport { NETWORK_URL } from \"../constants\";\r\n// 🌎 Importing types\r\nimport { AccountData } from \"../types/types.d\";\r\n\r\nexport const fetchAccount = async (publicKey: string) => {\r\n  // 🚀 Creating server instance with Stellar test network\r\n  const server = new StellarSdk.Server(NETWORK_URL);\r\n  // 🚀 Fetching account data for the provided public key\r\n  const accountData = await server.accounts().accountId(publicKey).call();\r\n\r\n  // 🌎 Destructuring some `accountData` properties for more convenient usage\r\n  const {\r\n    last_modified_time,\r\n    balances,\r\n    num_sponsoring,\r\n    num_sponsored\r\n  } = accountData;\r\n\r\n  return {\r\n    last_modified_time,\r\n    // 🌎 Formatting `balances` to match what is needed in UI\r\n    balances: balances.reduce((res: AccountData[], b: any) => {\r\n      let balance;\r\n\r\n      // 🚀 If asset type is `native`, we set asset code to XLM\r\n      if (b.asset_type === \"native\") {\r\n        balance = {\r\n          balance: b.balance,\r\n          asset_code: \"XLM\"\r\n        };\r\n      } else {\r\n        balance = {\r\n          balance: b.balance,\r\n          asset_code: b.asset_code,\r\n          asset_issuer: b.asset_issuer\r\n        };\r\n      }\r\n\r\n      return [...res, balance];\r\n    }, []),\r\n    num_sponsoring,\r\n    num_sponsored\r\n  };\r\n};\r\n","// Last updated: Nov 10, 2021\n// Comment convention:\n// 🚀 - rocket indicates Stellar code\n// 🌎 - globe indicates UI/React related code\n\n// 🌎 Imports in the file\nimport React from \"react\";\nimport StellarSdk from \"stellar-sdk\";\n// UI elements\nimport { Layout } from \"@stellar/design-system\";\n// Modals\nimport { SignOutModal } from \"./components/SignOutModal\";\n// Views\nimport { Account } from \"./views/Account\";\nimport { Intro } from \"./views/Intro\";\n// Methods\nimport { createKeystore } from \"./methods/createKeystore\";\nimport { fetchAccount } from \"./methods/fetchAccount\";\n// Services\nimport {\n  getStorageItem,\n  setStorageItem,\n  removeStorageItem\n} from \"./services/storage\";\n// Types\nimport { AccountKeys, AccountData } from \"./types/types.d\";\n// Styles\nimport \"./App.css\";\n\n// 🌎 Setting constants here\nconst STORAGE_KEY = \"app-example-account-key\";\n\nconst App = () => {\n  // 🌎 Handling React local state (state variables and setter functions)\n  const [accountKeys, setAccountKeys] = React.useState<AccountKeys | null>(\n    null\n  );\n  const [accountData, setAccountData] = React.useState<AccountData | null>(\n    null\n  );\n  const [isUiUpdating, setIsUiUpdating] = React.useState(false);\n  const [isUpdatingAccount, setIsUpdatingAccount] = React.useState(false);\n  const [signOutModalVisible, setSignOutModalVisible] = React.useState(false);\n\n  // 🌎 Assigning to variable here for more convenient usage\n  const publicKey = accountKeys?.publicKey;\n\n  // 🌎 On the first page load, using React `useEffect` hook, check if there is\n  // account stored in local storage.\n  React.useEffect(() => {\n    const savedAccountInfo = getStorageItem(STORAGE_KEY);\n\n    // 🌎 If there is an account in local storage, save it in local state\n    if (savedAccountInfo) {\n      const { publicKey, keystore } = JSON.parse(savedAccountInfo);\n      // 🚀 Setting Stellar public key and encrypted keystore to local state\n      // More about public key and keystore in `/methods/createKeystore.ts`\n      setAccountKeys({\n        publicKey,\n        keystore\n      });\n      // 🌎 Trigger to fetch the account data, handled in `React.useEffect` hook\n      // below\n      setIsUpdatingAccount(true);\n    }\n  }, []);\n\n  // 🌎 Using React `useEffect` hook, fetch account data (initial load or\n  // update)\n  React.useEffect(() => {\n    const fetchAccountData = async () => {\n      if (isUpdatingAccount && publicKey) {\n        // 🚀 Fetch Stellar account data using `stellar-sdk`\n        const data = await fetchAccount(publicKey);\n        // 🌎 Update local state\n        setAccountData(data);\n        setIsUpdatingAccount(false);\n      }\n    };\n\n    fetchAccountData();\n  }, [isUpdatingAccount, publicKey]);\n\n  const handleAccountInfo = (accountInfo: AccountKeys) => {\n    // 🌎 Update local state\n    setIsUiUpdating(false);\n    setAccountKeys(accountInfo);\n    setIsUpdatingAccount(true);\n    // 🌎 Save public key and encrypted keystore in browser’s local storage\n    setStorageItem(STORAGE_KEY, JSON.stringify(accountInfo));\n  };\n\n  const createAndSetAccount = async (pincode: string) => {\n    // 🌎 Update state to show loading state\n    setIsUiUpdating(true);\n    // 🚀 Generate new keypair on Stellar test network\n    const keypair = StellarSdk.Keypair.random();\n    // 🌎 Save encrypted secret key to keystore\n    const accountInfo = createKeystore(keypair, pincode);\n\n    try {\n      // 🚀 After new keypair is generated, we need to fund the account to make\n      // it active. We’re using Stellar’s testnet friendbot to do that.\n      await fetch(\n        `https://friendbot.stellar.org?addr=${accountInfo.publicKey}`\n      );\n      // 🌎 Update local state and save data in local storage\n      handleAccountInfo(accountInfo);\n    } catch (e) {\n      // 🌎 Handle error here\n    }\n  };\n\n  const signInWithSecretKey = (secretKey: string, pincode: string) => {\n    // 🌎 Update state to show loading state\n    setIsUiUpdating(true);\n    // 🚀 Create keypair from secret key on Stellar test network\n    const keypair = StellarSdk.Keypair.fromSecret(secretKey);\n    // 🌎 Save encrypted secret key to keystore\n    const accountInfo = createKeystore(keypair, pincode);\n    // 🌎 Update local state and save data in local storage\n    handleAccountInfo(accountInfo);\n  };\n\n  const signOut = () => {\n    // 🌎 Sign out by clearing the state and removing saved account from local\n    // storage\n    setAccountKeys(null);\n    removeStorageItem(STORAGE_KEY);\n  };\n\n  const conditionalSignOutAction = () => {\n    // 🌎 If on the `Account` view, show the `Sign out` link\n    if (accountKeys) {\n      return () => setSignOutModalVisible(true);\n    }\n\n    // 🌎 Don’t show `Sign out` link on the `Intro` view\n    return undefined;\n  };\n\n  // 🌎 Only UI related code below. More details will be in each view.\n  return (\n    <>\n      {/* 🌎 Header component */}\n      <Layout.Header\n        projectTitle=\"Benkiko DAO\"\n        // 🌎 Conditionally render `Sign out` link (if there is no action, the\n        // link will not be rendered)\n        onSignOut={conditionalSignOutAction()}\n        // 🌎 Enable dark mode toggle in the header\n        hasDarkModeToggle\n      />\n      <Layout.Content>\n        <Layout.Inset>\n          {accountKeys ? (\n            // 🌎 Render account view, if there is account info\n            <Account\n              accountKeys={accountKeys}\n              accountData={accountData}\n              refreshAccount={() => setIsUpdatingAccount(true)}\n            />\n          ) : (\n            // 🌎 Render create account view, if there is no account info yet\n            <Intro\n              createAndSetAccount={createAndSetAccount}\n              signInWithSecretKey={signInWithSecretKey}\n              isUiUpdating={isUiUpdating}\n            />\n          )}\n        </Layout.Inset>\n      </Layout.Content>\n\n      {/* Modals */}\n      <SignOutModal\n        visible={signOutModalVisible}\n        onClose={() => setSignOutModalVisible(false)}\n        onDone={signOut}\n      />\n    </>\n  );\n};\n\nexport default App;\n","export const setStorageItem = (key: string, value: string): void => {\r\n  // 🌎 Save key/value in browser’s local storage\r\n  localStorage.setItem(key, JSON.stringify(value));\r\n};\r\n\r\nexport const getStorageItem = (key: string): any => {\r\n  // 🌎 Get item by key from browser’s local storage\r\n  const item = localStorage.getItem(key);\r\n  // 🌎 If the item exists, parse it, else return null\r\n  return item ? JSON.parse(item) : null;\r\n};\r\n\r\nexport const removeStorageItem = (key: string): void => {\r\n  // 🌎 Remove item by key from browser’s local storage\r\n  localStorage.removeItem(key);\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\n// 🌎 Importing styles for Stellar Design System\nimport \"@stellar/design-system/build/styles.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}